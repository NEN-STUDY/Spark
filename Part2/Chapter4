{
  "paragraphs": [
    {
      "text": "%md\n# 구조적 API 개요",
      "user": "anonymous",
      "dateUpdated": "2022-03-29 13:09:35.498",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003e구조적 API 개요\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648559128644_1434323007",
      "id": "20220329-130528_1200635504",
      "dateCreated": "2022-03-29 13:05:28.645",
      "dateStarted": "2022-03-29 13:09:35.499",
      "dateFinished": "2022-03-29 13:09:35.506",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n- **데이터 흐름을 정의**하는 기본 추상화 개념\n- **비정형 로그 파일**부터 **반정형 CSV파일**, **매우 정형적인 파케이파일**까지 다양한 유형의 데이터를 처리할 수 있다.\n- 구조적 API에는 다음과 같은 세 가지 분산 컬렉션 API가 있음\n    - DataSet\n    - DataFrame\n    - SQL 테이블과 뷰",
      "user": "anonymous",
      "dateUpdated": "2022-03-29 13:10:26.513",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003cstrong\u003e데이터 흐름을 정의\u003c/strong\u003e하는 기본 추상화 개념\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e비정형 로그 파일\u003c/strong\u003e부터 \u003cstrong\u003e반정형 CSV파일\u003c/strong\u003e, \u003cstrong\u003e매우 정형적인 파케이파일\u003c/strong\u003e까지 다양한 유형의 데이터를 처리할 수 있다.\u003c/li\u003e\n  \u003cli\u003e구조적 API에는 다음과 같은 세 가지 분산 컬렉션 API가 있음\n    \u003cul\u003e\n      \u003cli\u003eDataSet\u003c/li\u003e\n      \u003cli\u003eDataFrame\u003c/li\u003e\n      \u003cli\u003eSQL 테이블과 뷰\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648559251620_1210881259",
      "id": "20220329-130731_436340523",
      "dateCreated": "2022-03-29 13:07:31.621",
      "dateStarted": "2022-03-29 13:10:26.513",
      "dateFinished": "2022-03-29 13:10:26.531",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## DataFrame과 Dataset\n- 잘 정의된 로우와 컬럼을 가지는 분산 테이블 형태의 컬렉션\n- 모든 로우는 같은 데이터 타입 정보를 갖고 있어야함\n- 결과를 생성하기 위해 어떤 데이터에 어떤 연산을 적용해야 하는지 정의하는 지연 연산의 실행 계획이며, 불변성을 가짐",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 06:45:05.050",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eDataFrame과 Dataset\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e잘 정의된 로우와 컬럼을 가지는 분산 테이블 형태의 컬렉션\u003c/li\u003e\n  \u003cli\u003e모든 로우는 같은 데이터 타입 정보를 갖고 있어야함\u003c/li\u003e\n  \u003cli\u003e결과를 생성하기 위해 어떤 데이터에 어떤 연산을 적용해야 하는지 정의하는 지연 연산의 실행 계획이며, 불변성을 가짐\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1647924124986_-840729463",
      "id": "20220322-044204_2118369970",
      "dateCreated": "2022-03-22 04:42:04.986",
      "dateStarted": "2022-03-30 06:44:54.978",
      "dateFinished": "2022-03-30 06:44:55.025",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 스키마\n- 분산 컬렉션에 저장할 **컬럼과 데이터 타입**을 정의하는 방법\n- 스키마는 데이터 소스에서 얻거나(schema-on-read) 직접 정의할 수 있음\n- **어떤 데이터 타입이 어느 위치**에 있는지 정의하는 방법이 필요함",
      "user": "anonymous",
      "dateUpdated": "2022-03-29 13:11:37.149",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e스키마\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e분산 컬렉션에 저장할 \u003cstrong\u003e컬럼과 데이터 타입\u003c/strong\u003e을 정의하는 방법\u003c/li\u003e\n  \u003cli\u003e스키마는 데이터 소스에서 얻거나(schema-on-read) 직접 정의할 수 있음\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e어떤 데이터 타입이 어느 위치\u003c/strong\u003e에 있는지 정의하는 방법이 필요함\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1647924639447_-989084661",
      "id": "20220322-045039_855870701",
      "dateCreated": "2022-03-22 04:50:39.447",
      "dateStarted": "2022-03-29 13:11:37.150",
      "dateFinished": "2022-03-29 13:11:37.160",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 스파크의 구조적 데이터 타입 개요\n- 스파크는 **실행 계획 수립과 처리에 사용하는 자체 데이터 타입 정보를 갖고 있는 카탈리스트 엔진**을 사용함\n    - 카탈리스트 엔진은 다양한 **실행 최적화** 기능 제공\n- 스파크는 자체 데이터 타입을 지원하는 **여러 언어 API와 직접 매핑되며, 각 언어에 대한 매핑 테이블**을 갖고 있음",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 06:49:38.790",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e스파크의 구조적 데이터 타입 개요\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e스파크는 \u003cstrong\u003e실행 계획 수립과 처리에 사용하는 자체 데이터 타입 정보를 갖고 있는 카탈리스트 엔진\u003c/strong\u003e을 사용함\n    \u003cul\u003e\n      \u003cli\u003e카탈리스트 엔진은 다양한 \u003cstrong\u003e실행 최적화\u003c/strong\u003e 기능 제공\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e스파크는 자체 데이터 타입을 지원하는 \u003cstrong\u003e여러 언어 API와 직접 매핑되며, 각 언어에 대한 매핑 테이블\u003c/strong\u003e을 갖고 있음\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648559497135_1315091334",
      "id": "20220329-131137_741175528",
      "dateCreated": "2022-03-29 13:11:37.135",
      "dateStarted": "2022-03-30 06:49:28.674",
      "dateFinished": "2022-03-30 06:49:28.687",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val df \u003d spark.range(500).toDF(\"number\")\nval df2 \u003d df.select(df.col(\"number\") + 10)",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 08:18:09.617",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "df: org.apache.spark.sql.DataFrame \u003d [number: bigint]\ndf2: org.apache.spark.sql.DataFrame \u003d [(number + 10): bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648559663325_-774087827",
      "id": "20220329-131423_1697602346",
      "dateCreated": "2022-03-29 13:14:23.325",
      "dateStarted": "2022-03-30 08:18:09.636",
      "dateFinished": "2022-03-30 08:18:10.022",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\ndf \u003d spark.range(500).toDF(\u0027number\u0027)\ndf.select(df[\u0027number\u0027] + 10)",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 08:18:19.495",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "DataFrame[(number + 10): bigint]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648559561870_812466103",
      "id": "20220329-131241_1591133298",
      "dateCreated": "2022-03-29 13:12:41.870",
      "dateStarted": "2022-03-30 08:18:19.514",
      "dateFinished": "2022-03-30 08:18:19.544",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n- 위 예제는 파이썬이 아닌 스파크 덧셈 연산을 수행\n- 스파크가 지원하는 언어를 이용해 작성된 표현식을 **카탈리스트 엔진에서 스파크의 데이터 타입으로 변환**해 명령을 처리하기 때문",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 08:16:27.596",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n  \u003cli\u003e위 예제는 파이썬이 아닌 스파크 덧셈 연산을 수행\u003c/li\u003e\n  \u003cli\u003e스파크가 지원하는 언어를 이용해 작성된 표현식을 \u003cstrong\u003e카탈리스트 엔진에서 스파크의 데이터 타입으로 변환\u003c/strong\u003e해 명령을 처리하기 때문\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648559585702_491055140",
      "id": "20220329-131305_208786496",
      "dateCreated": "2022-03-29 13:13:05.702",
      "dateStarted": "2022-03-30 08:16:27.597",
      "dateFinished": "2022-03-30 08:16:27.605",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## DataFrame과 Dataset 비교\n- 본질적으로 구조적 API에는 **\u0027비타입형\u0027인 DataFrame과 \u0027타입형\u0027인 Dataset**이 있음\n    - DataFrame에도 데이터 타입이 있음\n    - 하지만 스키마에 명시된 **데이터 타입의 일치 여부를 런타임**에 확인(DataFrame)하냐 / **컴파일 타임**에 확인(Dataset)하냐의 차이가 있음\n- 스파크 DataFrame은 **Row 타입으로 구성된 DataSet**임\n    - Row 타입은 스파크가 사용하는 **\u0027연산에 최적화된 인메모리 포맷\u0027**의 내부적인 표현 방식임\n    - Row 타입을 사용하면 가비지 컬렉션과 객체 초기화 부하가 있는 **JVM 데이터 타입을 사용하는 대신 자체 데이터 포맷을 사용하므로 매우 효율적인 연산**이 가능\n    - **어떤 언어 API를 사용하더라도 동일한 효과와 효율성**을 얻을 수 있음\n- 만약 컴파일 타임에 엄격한 데이터 검증이 필요하다면 DataSet 사용\n- https://spark.apache.org/docs/latest/sql-programming-guide.html",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 06:54:57.559",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eDataFrame과 Dataset 비교\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e본질적으로 구조적 API에는 \u003cstrong\u003e\u0026lsquo;비타입형\u0026rsquo;인 DataFrame과 \u0026lsquo;타입형\u0026rsquo;인 Dataset\u003c/strong\u003e이 있음\n    \u003cul\u003e\n      \u003cli\u003eDataFrame에도 데이터 타입이 있음\u003c/li\u003e\n      \u003cli\u003e하지만 스키마에 명시된 \u003cstrong\u003e데이터 타입의 일치 여부를 런타임\u003c/strong\u003e에 확인(DataFrame)하냐 / \u003cstrong\u003e컴파일 타임\u003c/strong\u003e에 확인(Dataset)하냐의 차이가 있음\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e스파크 DataFrame은 \u003cstrong\u003eRow 타입으로 구성된 DataSet\u003c/strong\u003e임\n    \u003cul\u003e\n      \u003cli\u003eRow 타입은 스파크가 사용하는 \u003cstrong\u003e\u0026lsquo;연산에 최적화된 인메모리 포맷\u0026rsquo;\u003c/strong\u003e의 내부적인 표현 방식임\u003c/li\u003e\n      \u003cli\u003eRow 타입을 사용하면 가비지 컬렉션과 객체 초기화 부하가 있는 \u003cstrong\u003eJVM 데이터 타입을 사용하는 대신 자체 데이터 포맷을 사용하므로 매우 효율적인 연산\u003c/strong\u003e이 가능\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e어떤 언어 API를 사용하더라도 동일한 효과와 효율성\u003c/strong\u003e을 얻을 수 있음\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e만약 컴파일 타임에 엄격한 데이터 검증이 필요하다면 DataSet 사용\u003c/li\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://spark.apache.org/docs/latest/sql-programming-guide.html\"\u003ehttps://spark.apache.org/docs/latest/sql-programming-guide.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648559953926_800385752",
      "id": "20220329-131913_254166243",
      "dateCreated": "2022-03-29 13:19:13.926",
      "dateStarted": "2022-03-30 06:54:47.421",
      "dateFinished": "2022-03-30 06:54:47.438",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 컬럼\n- 컬럼은 다음과 같은 값을 표현\n    - 단순 데이터 타입(정수형, 문자열 등)\n    - 복합 데이터 타입(배열, 맵 등)\n    - `null` 값 표현이 가능\n- 스파크는 데이터 타입의 모든 정보를 추적하며 다양한 컬럼 변환 방법을 제공함",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 08:26:47.221",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e컬럼\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e컬럼은 다음과 같은 값을 표현\n    \u003cul\u003e\n      \u003cli\u003e단순 데이터 타입(정수형, 문자열 등)\u003c/li\u003e\n      \u003cli\u003e복합 데이터 타입(배열, 맵 등)\u003c/li\u003e\n      \u003cli\u003e\u003ccode\u003enull\u003c/code\u003e 값 표현이 가능\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e스파크는 데이터 타입의 모든 정보를 추적하며 다양한 컬럼 변환 방법을 제공함\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648560462803_353015451",
      "id": "20220329-132742_489228374",
      "dateCreated": "2022-03-29 13:27:42.803",
      "dateStarted": "2022-03-30 08:26:47.221",
      "dateFinished": "2022-03-30 08:26:47.231",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 로우\n- 로우는 데이터 레코드\n- SQL, RDD, 데이터소스에서 얻거나 직접 만들 수 있음",
      "user": "anonymous",
      "dateUpdated": "2022-03-29 13:29:23.637",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e로우\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e로우는 데이터 레코드\u003c/li\u003e\n  \u003cli\u003eSQL, RDD, 데이터소스에서 얻거나 직접 만들 수 있음\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648560506420_-249698184",
      "id": "20220329-132826_1215137095",
      "dateCreated": "2022-03-29 13:28:26.420",
      "dateStarted": "2022-03-29 13:29:23.638",
      "dateFinished": "2022-03-29 13:29:23.646",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "spark.range(2).toDF().collect()",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 08:28:34.829",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "res224: Array[org.apache.spark.sql.Row] \u003d Array([0], [1])\n"
          }
        ]
      },
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            "http://b3f9e8c0f3bd:4040/jobs/job?id\u003d126"
          ],
          "interpreterSettingId": "spark"
        }
      },
      "apps": [],
      "jobName": "paragraph_1648560563615_-1546014158",
      "id": "20220329-132923_193223512",
      "dateCreated": "2022-03-29 13:29:23.615",
      "dateStarted": "2022-03-30 08:28:34.846",
      "dateFinished": "2022-03-30 08:28:35.090",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nspark.range(2).collect()",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 08:29:16.468",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[Row(id\u003d0), Row(id\u003d1)]\n"
          }
        ]
      },
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            "http://b3f9e8c0f3bd:4040/jobs/job?id\u003d128"
          ],
          "interpreterSettingId": "spark"
        }
      },
      "apps": [],
      "jobName": "paragraph_1648560590167_514089875",
      "id": "20220329-132950_1147015704",
      "dateCreated": "2022-03-29 13:29:50.168",
      "dateStarted": "2022-03-30 08:29:16.485",
      "dateFinished": "2022-03-30 08:29:16.531",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 스파크 데이터 타입\n- 스파크는 여러 내부 데이터 타입을 가지고 있음",
      "user": "anonymous",
      "dateUpdated": "2022-03-29 13:30:51.667",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e스파크 데이터 타입\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e스파크는 여러 내부 데이터 타입을 가지고 있음\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648560587403_256586234",
      "id": "20220329-132947_955133125",
      "dateCreated": "2022-03-29 13:29:47.404",
      "dateStarted": "2022-03-29 13:30:51.668",
      "dateFinished": "2022-03-29 13:30:51.675",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.sql.types._\n\nval B \u003d ByteType\nval s \u003d StringType\nval b \u003d BinaryType",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 06:57:16.616",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "import org.apache.spark.sql.types._\nB: org.apache.spark.sql.types.ByteType.type \u003d ByteType\ns: org.apache.spark.sql.types.StringType.type \u003d StringType\nb: org.apache.spark.sql.types.BinaryType.type \u003d BinaryType\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648560651644_-528626994",
      "id": "20220329-133051_1692083993",
      "dateCreated": "2022-03-29 13:30:51.644",
      "dateStarted": "2022-03-30 06:57:06.583",
      "dateFinished": "2022-03-30 06:57:07.018",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nfrom pyspark.sql.types import *\n\nB \u003d ByteType()\ns \u003d StringType()\nb \u003d BinaryType()\n\nprint(B)\nprint(s)\nprint(b)",
      "user": "anonymous",
      "dateUpdated": "2022-03-30 08:29:51.643",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "ByteType\nStringType\nBinaryType\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648560682313_-1274235747",
      "id": "20220329-133122_890903848",
      "dateCreated": "2022-03-29 13:31:22.313",
      "dateStarted": "2022-03-30 08:29:51.661",
      "dateFinished": "2022-03-30 08:29:51.672",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 구조적 API의 실행 과정\n1. DataFrame/ Dataset/ SQL을 이용해 코드를 작성한다.\n2. 정상적인 코드라면 스파크가 논리적 실행 계획으로 변환한다.\n3. 스파크는 논리적 실행 계획을 물리적 실행 계획으로 변환하며, 그 과정에서 추가적인 최적화를 할 수 있는지 확인한다.\n4. 스파크는 클러스터에서 물리적 실행 계획(RDD 처리)을 실행한다.",
      "user": "anonymous",
      "dateUpdated": "2022-03-29 13:35:48.387",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e구조적 API의 실행 과정\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003eDataFrame/ Dataset/ SQL을 이용해 코드를 작성한다.\u003c/li\u003e\n  \u003cli\u003e정상적인 코드라면 스파크가 논리적 실행 계획으로 변환한다.\u003c/li\u003e\n  \u003cli\u003e스파크는 논리적 실행 계획을 물리적 실행 계획으로 변환하며, 그 과정에서 추가적인 최적화를 할 수 있는지 확인한다.\u003c/li\u003e\n  \u003cli\u003e스파크는 클러스터에서 물리적 실행 계획(RDD 처리)을 실행한다.\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648560738082_-1741761390",
      "id": "20220329-133218_1908128281",
      "dateCreated": "2022-03-29 13:32:18.082",
      "dateStarted": "2022-03-29 13:35:48.387",
      "dateFinished": "2022-03-29 13:35:48.398",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n![](app/images/4-1.png)",
      "user": "anonymous",
      "dateUpdated": "2022-03-29 13:58:50.229",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003cimg src\u003d\"app/images/4-1.png\" /\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648560948361_1751626763",
      "id": "20220329-133548_1076171201",
      "dateCreated": "2022-03-29 13:35:48.361",
      "dateStarted": "2022-03-29 13:58:50.230",
      "dateFinished": "2022-03-29 13:58:50.234",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 논리적 실행 계획\n1. 사용자 코드 -\u003e 검증 전 논리적 실행 계획으로 변환\n    - 사용자의 다양한 표현식을 **최적화된 버전**으로 변환함\n    - **코드의 유효성과 테이블이나 컬럼의 존재 여부만을 판단**하는 과정\n    - 아직 실행 계획을 검증하지 않은 상태\n2. 분석기\n    - **컬럼과 테이블**을 검증하기 위해 카탈로그, 모든 테이블의 저장소, DataFrame의 정보 활용\n    - 필요한 테이블이나 컬럼이 카탈로그에 없다면 검증 전 논리적 실행 계획이 만들어지지 않음\n3. 분석기에서의 검증 결과는 **카탈리스트 옵티마이저**로 전달\n    - 카탈리스트 옵티마이저는 **논리적 실행 계획을 최적화**하는 규칙의 모음\n4. 최적화된 논리적 실행 계획 완성",
      "user": "anonymous",
      "dateUpdated": "2022-03-29 14:00:28.501",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e논리적 실행 계획\u003c/h2\u003e\n\u003col\u003e\n  \u003cli\u003e사용자 코드 -\u0026gt; 검증 전 논리적 실행 계획으로 변환\n    \u003cul\u003e\n      \u003cli\u003e사용자의 다양한 표현식을 \u003cstrong\u003e최적화된 버전\u003c/strong\u003e으로 변환함\u003c/li\u003e\n      \u003cli\u003e\u003cstrong\u003e코드의 유효성과 테이블이나 컬럼의 존재 여부만을 판단\u003c/strong\u003e하는 과정\u003c/li\u003e\n      \u003cli\u003e아직 실행 계획을 검증하지 않은 상태\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e분석기\n    \u003cul\u003e\n      \u003cli\u003e\u003cstrong\u003e컬럼과 테이블\u003c/strong\u003e을 검증하기 위해 카탈로그, 모든 테이블의 저장소, DataFrame의 정보 활용\u003c/li\u003e\n      \u003cli\u003e필요한 테이블이나 컬럼이 카탈로그에 없다면 검증 전 논리적 실행 계획이 만들어지지 않음\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e분석기에서의 검증 결과는 \u003cstrong\u003e카탈리스트 옵티마이저\u003c/strong\u003e로 전달\n    \u003cul\u003e\n      \u003cli\u003e카탈리스트 옵티마이저는 \u003cstrong\u003e논리적 실행 계획을 최적화\u003c/strong\u003e하는 규칙의 모음\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e최적화된 논리적 실행 계획 완성\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648562118473_1479053804",
      "id": "20220329-135518_223063898",
      "dateCreated": "2022-03-29 13:55:18.473",
      "dateStarted": "2022-03-29 14:00:28.502",
      "dateFinished": "2022-03-29 14:00:28.516",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 물리적 실행 계획\n- 스파크 실행 계획이라고도 불림\n- 논리적 실행 계획을 클러스터 환경에서 실행하는 방법을 정의\n\n1. **다양한 물리적 실행 전략 생성**\n2. **비용 모델**을 이용하여 비교한 후 **최적의 전략 선택**",
      "user": "anonymous",
      "dateUpdated": "2022-03-29 14:01:05.047",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e물리적 실행 계획\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e스파크 실행 계획이라고도 불림\u003c/li\u003e\n  \u003cli\u003e논리적 실행 계획을 클러스터 환경에서 실행하는 방법을 정의\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n  \u003cli\u003e\u003cstrong\u003e다양한 물리적 실행 전략 생성\u003c/strong\u003e\u003c/li\u003e\n  \u003cli\u003e\u003cstrong\u003e비용 모델\u003c/strong\u003e을 이용하여 비교한 후 \u003cstrong\u003e최적의 전략 선택\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648562423660_1906439758",
      "id": "20220329-140023_746752223",
      "dateCreated": "2022-03-29 14:00:23.660",
      "dateStarted": "2022-03-29 14:01:05.048",
      "dateFinished": "2022-03-29 14:01:05.055",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## 실행\n- 물리적 실행 계획을 선정한 다음 저수준 프로그래밍 인터페이스인 RDD를 대상으로 모든 코드 실행\n- 스파크는 런타임에 전체 task나 stage를 제거할 수 있는 자바 바이트 코드를 생성해 추가적인 최적화 수행",
      "user": "anonymous",
      "dateUpdated": "2022-03-29 14:02:01.953",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003e실행\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e물리적 실행 계획을 선정한 다음 저수준 프로그래밍 인터페이스인 RDD를 대상으로 모든 코드 실행\u003c/li\u003e\n  \u003cli\u003e스파크는 런타임에 전체 task나 stage를 제거할 수 있는 자바 바이트 코드를 생성해 추가적인 최적화 수행\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1648562465023_522897449",
      "id": "20220329-140105_146098609",
      "dateCreated": "2022-03-29 14:01:05.023",
      "dateStarted": "2022-03-29 14:02:01.954",
      "dateFinished": "2022-03-29 14:02:01.960",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Chapter4",
  "id": "2GZXA4QVG",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "python:shared_process": [],
    "sh:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}
